1 2 3 4
9 0 1 2
3 4 5 6
5 6 7 8


1 2 3 4
5 6 7 8
9 0 1 2
3 4 5 6


_asm
	{
		mov ecx, [sz]
		mov eax, 0
		mov ebx, 0
		cycl:
		movq mm1, temp [ebx]
		paddw mm0, mm1
		add ebx, type sum * size
		loop cycl
		movq [sum], mm0
		//lea esi, sum //заносим адрес массива

		mov ecx, sz - 1
		ext:
		mov ebx, 0 //начальное смещение
			inter:
			mov eax, sum ebx]
			add ebx, type sum
			cmp eax, sum[ebx]
			jle next1
			call swaping
			next1:
			cmp sz - 1, ebx 
	        jge inter
		 loop ext
		 jmp ending
		    swaping: 
			xchg eax, sum[ebx]
			mov sum[ebx - 2], eax
			movq mm0, mtx [size * (ebx - 1)]
			movq mm1, mtx [size * ebx]
			movq mtx [size * ebx], mm0
			movq mtx [type sum * size * (ebx - 1)], mm1
			/*mov ncx, type mtx / size*/
			ret
		ending:
	}